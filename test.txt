/* eslint-disable camelcase */
/* eslint-disable no-shadow */
/* eslint-disable no-console */
/**
 * This is an example of a basic node.js script that performs
 * the Authorization Code oAuth2 flow to authenticate against
 * the Spotify Accounts.
 *
 * For more information, read
 * https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow
 */

const express = require('express') // Express web server framework
const request = require('request') // "Request" library
const cors = require('cors')
const querystring = require('querystring')
const cookieParser = require('cookie-parser')

const client_id = '8f551ffb202446a89db4ec290ce3b5e2' // Your client id
const client_secret = '6eebeda54cfa41b5b5ce639aa57cef6e' // Your secret
const redirect_uri = 'http://localhost:8888/callback' // Your redirect uri

const deviceID = '73cb47ef5a6e6c42413e61f7b52bc0b2c0ab4167'

/**
 * Generates a random string containing numbers and letters
 * @param  {number} length The length of the string
 * @return {string} The generated string
 */
const generateRandomString = function(length) {
    let text = ''
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length))
    }
    return text
}

const stateKey = 'spotify_auth_state'

const app = express()

app.use(express.static(`${__dirname}/public`))
    .use(cors())
    .use(cookieParser())

app.get('/login', function(req, res) {
    const state = generateRandomString(16)
    res.cookie(stateKey, state)

    // your application requests authorization
    const scope =
        'user-read-private user-read-email user-read-playback-state user-modify-playback-state user-read-currently-playing app-remote-control'
    res.redirect(
        `https://accounts.spotify.com/authorize?${querystring.stringify({
            response_type: 'code',
            client_id,
            scope,
            redirect_uri,
            state,
        })}`
    )
})

app.get('/callback', function(req, res) {
    // your application requests refresh and access tokens
    // after checking the state parameter

    const code = req.query.code || null
    const state = req.query.state || null
    const storedState = req.cookies ? req.cookies[stateKey] : null

    if (state === null || state !== storedState) {
        res.redirect(
            `/#${querystring.stringify({
                error: 'state_mismatch',
            })}`
        )
    } else {
        res.clearCookie(stateKey)
        const authOptions = {
            url: 'https://accounts.spotify.com/api/token',
            form: {
                code,
                redirect_uri,
                grant_type: 'authorization_code',
            },
            headers: {
                Authorization: `Basic ${new Buffer(`${client_id}:${client_secret}`).toString('base64')}`,
            },
            json: true,
        }

        request.post(authOptions, function(error, response, body) {
            if (!error && response.statusCode === 200) {
                const { access_token } = body
                const { refresh_token } = body

                const options = {
                    url: 'https://api.spotify.com/v1/me/',
                    headers: { Authorization: `Bearer ${access_token}` },
                    json: true,
                }
                console.log(access_token)
                // we can also pass the token to the browser to make requests from there
                res.redirect(
                    `/#${querystring.stringify({
                        access_token,
                        refresh_token,
                    })}`
                )
            } else {
                res.redirect(
                    `/#${querystring.stringify({
                        error: 'invalid_token',
                    })}`
                )
            }
        })
    }
})

app.get('/devices', function(req, res) {
    const access_token =
        'BQA80OZhDuxoeiFz17fyl833YZsw-PZ-0rWuATirm5_uDUCu2TAyuV67u3-6PS948xQDJySylmcoYsJ6l4-Zyd-JQiiqk8kPX1O2DHIOSpE_RPflBwxQRl6m4tfYMwPN72ccoh5jNg8BjJFuT6ufQ0LxU7NJ3XAYCOIp5sR8OmdgaZGSE9q6jeur'
    const options = {
        url: 'https://api.spotify.com/v1/me/player/devices',
        // eslint-disable-next-line camelcase
        headers: { Authorization: `Bearer ${access_token}` },
        json: true,
    }

    request.get(options, function(error, response, body) {
        const { devices } = body
        const device = devices.filter(device => device.id === deviceID)

        const url = `https://api.spotify.com/v1/me/player/play`
        request.put(
            {
                url,
                headers: { Authorization: `Bearer ${access_token}` },
                json: true,
                data: {
                    devices_ids: [deviceID],
                },
            },
            function(error, response, body) {
                res.send({ device, body, response })
            }
        )
    })
})

app.get('/refresh_token', function(req, res) {
    // requesting access token from refresh token
    const { refresh_token } = req.query
    const authOptions = {
        url: 'https://accounts.spotify.com/api/token',
        headers: { Authorization: `Basic ${new Buffer(`${client_id}:${client_secret}`).toString('base64')}` },
        form: {
            grant_type: 'refresh_token',
            refresh_token,
        },
        json: true,
    }

    request.post(authOptions, function(error, response, body) {
        if (!error && response.statusCode === 200) {
            const { access_token } = body
            res.send({
                access_token,
            })
        }
    })
})

console.log('Listening on 8888')
app.listen(8888)


export SPOTIPY_CLIENT_ID='8f551ffb202446a89db4ec290ce3b5e2'
export SPOTIPY_CLIENT_SECRET='6eebeda54cfa41b5b5ce639aa57cef6e'
export SPOTIPY_REDIRECT_URI='http://localhost:8888/callback'